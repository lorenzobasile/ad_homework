#include "quick_sort.h"

int partition(void *A, size_t p, size_t i, size_t j,const size_t elem_size,total_order leq)
{

    swap(A+(p*elem_size),A+(i*elem_size),elem_size);
    p=i;
    i++;

    while(i<=j)
    {
        if(!(leq(A+(i*elem_size),A+(p*elem_size)))){
            swap(A+(i*elem_size),A+(j*elem_size),elem_size);
            j--;
        }
        else{
            i++;
        }
    }
        
    swap(A+(p*elem_size), A+(j*elem_size),elem_size);
    return j;
}


void quicksort_util(void *A, size_t left,size_t right,const size_t elem_size,total_order leq)
{
    while(left<right){
        size_t pivot = partition(A,left,left,right-1,elem_size,leq);
        quicksort_util(A,left,pivot,elem_size,leq);
        left=pivot+1;
    }
}

void quick_sort(void *A, const unsigned int n, 
                const size_t elem_size, 
                total_order leq)
{
    quicksort_util(A,0,n,elem_size,leq);
}
